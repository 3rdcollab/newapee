/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  StakingRewardsHelper,
  StakingRewardsHelperInterface,
} from "../StakingRewardsHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenSeized",
    type: "event",
  },
  {
    inputs: [],
    name: "claimAllRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "stakingRewards",
        type: "address[]",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract StakingRewardsFactoryInterface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    name: "getRewardTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "rewardTokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "rewardTokenSymbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "rewardTokenDecimals",
            type: "uint8",
          },
        ],
        internalType: "struct StakingRewardsHelper.RewardTokenInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingInfo",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakingTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "rewardTokenAddress",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "rate",
                type: "uint256",
              },
            ],
            internalType: "struct StakingRewardsHelper.RewardRate[]",
            name: "rewardRates",
            type: "tuple[]",
          },
        ],
        internalType: "struct StakingRewardsHelper.StakingInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "rewardTokens",
        type: "address[]",
      },
    ],
    name: "getUserClaimableRewards",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "rewardTokenAddress",
                type: "address",
              },
              {
                internalType: "string",
                name: "rewardTokenSymbol",
                type: "string",
              },
              {
                internalType: "uint8",
                name: "rewardTokenDecimals",
                type: "uint8",
              },
            ],
            internalType: "struct StakingRewardsHelper.RewardTokenInfo",
            name: "rewardToken",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct StakingRewardsHelper.RewardClaimable[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getUserStaked",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "stakingTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct StakingRewardsHelper.UserStaked[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "seize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class StakingRewardsHelper__factory {
  static readonly abi = _abi;
  static createInterface(): StakingRewardsHelperInterface {
    return new utils.Interface(_abi) as StakingRewardsHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewardsHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StakingRewardsHelper;
  }
}
